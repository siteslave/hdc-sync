#!/usr/bin/env node

'use strict';

var program = require('commander');
var fs = require('fs');
var fse = require('fs-extra');
var shell = require('shelljs');
var colors = require('cli-color');
var moment = require('moment');
var Q = require('q');
var yaml = require('yamljs');
var _ = require('lodash');

// Main Sync program
var Sync = require('../lib/hdc-sync');
var Server = require('../lib/server');
var Config = require('../lib/config');
var Conn = require('../lib/connection');
var Importor = require('../lib/hdc-import');
var hdcExport = require('../lib/hdc-export');
var http = require('../lib/hdc-http');
//var hdc = require('../lib/hdc-export');

require('q-foreach')(Q);

var configData = null;

program
    .version('0.1.8')
    .usage('[options] ... [file]')
    .option('-c, --config <file>', 'Specify configure file')
    .option('-t, --test', 'Testing connection')
    //.option('-s, --start <start> ', 'Start date, exp: 2014-10-01')
    //.option('-e, --end <end> ', 'End date, exp: 2014-10-01')
    .option('-n, --init <client | server>', 'Initial configure file')
    .option('-u, --upload <file>', 'Upload file (Client mode)')
    .option('-i, --import <file | directory>', 'Import file (Server mode)')
    .parse(process.argv);

if (program.config) {

    if(program.test) {

        fs.access(program.config, fs.R_OK, function (err) {
            if (err) {
                console.log(colors.bgBlack.yellow('No configure file found! '));
                console.log(colors.blackBright(program.config));
            } else {

                configData = Config.getConfig(program.config);

                if (configData.mode != 'client') {
                    console.log('Testing mode for client only!');
                    process.exit(1);
                } else {
                    console.log(colors.blue('Testing connection.'));

                    var hdcResult = true;
                    var serverResult = true;

                    Conn.testHDCConnection(configData.hdc)
                        .then(function (resp) {

                            hdcResult = resp;

                            var testingUrl = 'http://' + configData.server.address + ':' + configData.server.port + '/status';
                            return Conn.testServerConnection(testingUrl);

                        }).then(function (resp) {
                            serverResult = resp;

                            if (hdcResult) {
                                console.log('Testing HDC connection...\t\t\t' + colors.green('OK'));
                            } else {
                                console.log('Testing HDC connection...\t\t\t' + colors.red('FAILED'));
                            }

                            if (serverResult) {
                                console.log('Testing Server connection...\t\t\t' + colors.green('OK'));
                            } else {
                                console.log('Testing Server connection...\t\t\t' + colors.red('FAILED'));
                            }

                        });
                }

            }
        });

    } else if(program.upload) {
        fs.access(program.config, fs.R_OK, function (err) {
            if (err) {
                console.log(colors.bgBlack.yellow('Can not read configure file found! '));
                console.log(colors.blackBright(program.config));
                process.exit(1);
            } else {
                fs.access(program.upload, fs.R_OK, function (err) {

                    if (err) {
                        console.log(colors.red('File not found!'));
                        process.exit(1);
                    } else {
                        var configData = Config.getConfig(program.config);

                        if (configData.mode == 'client') {
                            var address = configData.server.address,
                                port = configData.server.port;

                            var uploadUrl = 'http://' + address + ':' + port + '/upload';

                            //typeof hdc.host == 'number'
                            var connection = {
                                host: typeof configData.hdc.host == 'number' ? configData.hdc.host.toString() : configData.hdc.host,
                                port: configData.hdc.port,
                                database: typeof configData.hdc.database == 'number' ? configData.hdc.database.toString() : configData.hdc.database,
                                user: typeof configData.hdc.user == 'number' ? configData.hdc.user.toString() : configData.hdc.user,
                                password: typeof configData.hdc.password == 'number' ? configData.hdc.password.toString() : configData.hdc.password
                            };

                            var db = require('knex')({
                                client: 'mysql',
                                connection: connection,
                                pool: {
                                    min: 0,
                                    max: 500
                                },
                                debug: false
                            });

                            hdcExport.getProvinceCode(db)
                                .then(function (provCode) {
                                    http.doUpload(uploadUrl, program.upload, provCode)
                                        .then(function () {
                                            console.log('\n');
                                            console.log(colors.green.blink('OK'));
                                            process.exit(0);
                                        }, function (err) {
                                            console.log('\n');
                                            console.log(colors.red.blink('FAILED'));
                                            console.log('\n');
                                            console.log(colors.red(err));
                                            process.exit(1);
                                        });
                                }, function (err) {
                                    console.log(colors.red(err));
                                    process.exit(1);
                                });


                        } else {
                            console.log(colors.red('Can\'t run in server mode!'));
                        }
                    }

                });
            }
        });
    } else {

        // Check configure file exists
        fs.access(program.config, fs.R_OK, function (err) {
            if (err) {
                console.log(colors.bgBlack.yellow('Can not read configure file found! '));
                console.log(colors.blackBright(program.config));
            } else {

                configData = Config.getConfig(program.config);
                var year = program.year || moment().get('year') + 543;
                // Get mode

                if (configData.mode == 'server') {
                    // create default folder
                    shell.mkdir('-p', configData.extractPath);
                    shell.mkdir('-p', configData.uploadPath);

                    if (program.import) {
                        // Import file
                        Importor.startImport(program.import, configData);
                    } else {
                        // Start server mode
                        Server.init(configData);
                    }

                } else if (configData.mode == 'client') {

                    shell.mkdir('-p', configData.exportPath);
                    shell.mkdir('-p', configData.outboxPath);
                    shell.mkdir('-p', configData.backupPath);
                    shell.mkdir('-p', configData.sqlPath);
                    fse.ensureFileSync(configData.logPath);

                    console.log(colors.green('Starting with ') + colors.red('client mode.'));

                    /**
                     * Todo
                     * - Check HDC Connection
                     * - Check Server Connection
                     */

                    var hdcResult = true;
                    var serverResult = true;

                    Conn.testHDCConnection(configData.hdc)
                        .then(function (resp) {

                            hdcResult = resp;

                            var testingUrl = 'http://' + configData.server.address + ':' + configData.server.port + '/status';
                            return Conn.testServerConnection(testingUrl);

                        }).then(function (resp) {
                            serverResult = resp;

                            if (hdcResult) {
                                console.log('Testing HDC connection...\t\t\t' + colors.green('OK'));
                            } else {
                                console.log('Testing HDC connection...\t\t\t' + colors.red('FAILED'));
                            }

                            if (serverResult) {
                                console.log('Testing Server connection...\t\t\t' + colors.green('OK'));
                            } else {
                                console.log('Testing Server connection...\t\t\t' + colors.red('FAILED'));
                            }

                            if (serverResult && hdcResult) {
                                // get start, end date
                                var startDate = null;
                                var endDate = null;

                                // Get active year
                                var activeYear = configData.activeYear;
                                var idxActiveYear = _.findIndex(configData.year, {id: activeYear});

                                var cfgStartDate = configData.year[idxActiveYear].start;
                                var cfgEndDate = configData.year[idxActiveYear].end;

                                if (!moment(cfgStartDate, 'YYYY-MM-DD').isValid()) {
                                    console.log(colors.red('Invalid start date, use default date.'));
                                    startDate = (moment().get('year') - 1) + '-10-01';
                                } else {
                                    startDate = cfgStartDate;
                                }

                                if (!moment(cfgEndDate, 'YYYY-MM-DD').isValid()) {
                                    console.log(colors.red('Invalid end date, use default date.'));
                                    endDate = moment().get('year') + '-09-30';
                                } else {
                                    endDate = cfgEndDate;
                                }

                                Sync.startSync(configData, startDate, endDate, activeYear);

                            } else {
                                console.log(colors.red('Connection failed, exit program...'));
                                process.exit(1);
                            }
                        }, function (err) {
                            console.log(colors.red('Connection failed, exit program...'));
                            process.exit(1);
                        });

                } else {
                    console.log(colors.bgBlack.red('Please set running mode!'));
                    process.exit(1);
                }

            }
        });

    }

}

if (program.init) {
    // create init config
    if (program.init == 'server') {

        var cfg = {
            mode: "server",
            address: "127.0.0.1",
            port: 8888,
            extractPath: "./hdc-sync/extracted",
            uploadPath: "./hdc-sync/uploaded",
            logPath: "./hdc-sync/hdc-sync-server.log",
            publicPath: "./hdc-sync/public",
            dc: {
                host: "127.0.0.1",
                port: 3306,
                database: "kpis",
                user: "kpis",
                password: "kpis"
            }
        };

        var cfgYaml = yaml.stringify(cfg, 4);

        fs.writeFile('./config-server.yaml', cfgYaml, function (err) {
            if (err) {
                console.log(colors.red(err));
                process.exit(1);
            } else {
                console.log(colors.green('Create configure file success.'));
                process.exit(0);
            }
        });

    } else {

        var cfg = {
            mode: "client",
            server: {
                address: "127.0.0.1",
                port: 8888,
                key: "1234567890"
            },
            hdc: {
                host: "127.0.0.1",
                port: 3306,
                database: "hdc",
                user: "hdc",
                password: "hdc"
            },
            activeYear: "2558",
            year: [
                { id: "2557", start: "2013-10-01", end: "2014-09-30" },
                { id: "2558", start: "2014-10-01", end: "2015-09-30" },
                { id: "2559", start: "2015-10-01", end: "2016-09-30" }
            ],

            exportPath: "./hdc-sync/export",
            backupPath: "./hdc-sync/backup",
            outboxPath: "./hdc-sync/outbox",
            sqlPath: "./hdc-sync/sql",
            logPath: "./hdc-sync/hdc-sync.log"

        };

        var cfgYaml = yaml.stringify(cfg, 4);

        fs.writeFile('./config-client.yaml', cfgYaml, function (err) {
            if (err) {
                console.log(colors.red(err));
                process.exit(1);
            } else {
                console.log(colors.green('Create configure file success.'));
                process.exit(0);
            }
        });

    }

}
